---
title: "Prototyping principles"
subtitle: "Six simple steps for coding effective interfaces in HTML & CSS"
paragraphs: "Guidelines to help you implement healthy interfaces that add real business value and deliver good user experience."
layout: "_layouts/base.njk" 
description: "Guidelines to help you implement healthy interfaces that add real business value and deliver good user experience."
bodyClass: "[ front ]"
---

<p class="dropcap" fetchpriority="high">
Once your key pages are fully mocked-up and you have an idea of the design direction, code a prototype in HTML and CSS that you can test and use as a blueprint to implement your website.
</p>

<h3>Why an HTML & CSS prototype?</h3>

<p>A prototype in HTML & CSS will allow you to quickly assemble responsive layouts, experiment with typography and grids, test interactions, and iterate cost-effectively to ensure that you build the best product for your users.
<p>Prototyping is the foundation for coding static websites.</p>

<h3>A blueprint for developers</h3>

<p>If the final build will be done by developers on a CMS, creating a prototype in HTML & CSS will allow you to:
</p>
<ol class="content-list">
<li>Create a blueprint that developers can follow to implement the designs;</li>
<li>Save time in preparing assets such as HTML files, including CSS.</li>
</ol>

<h3>The 6 Simple Prototyping Steps</h3>

<p><em>The 6 Simple Prototyping Steps</em> is a breakdown of our process in 6 steps to help you implement <strong>high-performing</strong> interfaces <strong>quickly</strong> in HTML &amp; CSS following best practices in accessibility, progressive enhancement, performance and CSS.</p>
<p>These checklists and best practices have been created and curated based on 8 years of designing and implementing custom website designs. </p>

 <h3>These are our prototyping principles</h3>
<h4 class="subtitle text-grey-color">Take into consideration performance and accessibility</h4> 

<ol class="special-list bg-primary-color">
   <li><a href="/setup/">Setup your project</a></li>
   <li><a href="/semantic-html/">Write Semantic HTML</a></li>	 
   <li><a href="/performance/">Consider performance</a></li>
   <li><a href="/css-architecture/">Use a clear CSS methodology</a></li>
   <li><a href="/modern-css/">Write Modern CSS</a></li>
   <li><a href="/testing/">Test, learn, iterate</a></li>	 	                   	          	          
 </ol> 	              
 
 <p>By following these principles, you will be able to:</p>
 
 <ul class="content-list">
 <li>Implement responsive designs using semantic HTML and Modern CSS; 
 <li>Test early concepts effectively to avoid costly errors; 
 <li>Optimise your website for better performance and accessibility; 
 <li>Organise and maintain better your CSS; 
 <li>Have a prototype ready to be implemented on a CMS; 
 <li>Build user-friendly interfaces.</li>

 </ul>

<h3>Results if you don't follow the principles</h3>
<h4 class="subtitle text-grey-color">If the product fails, you will fail too</h4>
    
    <ol class="special-list bg-alert-color">
      <li>Costly development time</li>
      <li>Bad performance</li>
      <li>Stuggle to mantain codebase</li>
      <li>You will stay confused</li>
      <li>Obsolete front-end skills</li>
      <li>Product with poor UX</li>
    </ol>
